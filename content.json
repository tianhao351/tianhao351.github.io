[{"title":"Neurons Networks:Representation","date":"2017-04-19T12:51:36.000Z","path":"2017/04/19/neuralNetworks-Representation/","text":"Neurons Networks:Representationhistory: Origins: Algorithms that try to mimic the brain It was widely used in 80s and early 90s Recent resurgence:State-of-the-art technique for many applications Neuron Model:logistic unit sigmoid(logistic) activation function x is the in put and h /theta (x) is the output /theta is the “weights” g(z) ‘s functional image is as follows: X0 and X0(2) is the bios unit. Every layers expect input layer and output layer are hidden layer. Pay attention to the expression. Pay extra special attention to the meaning of ai(j) and \\theta (j) \\theta (j) will be of dimension s(j+1)*(sj + 1). Forward propagation: Vectorized implementation a^(1) = x We have to add a0 before calculation of z(a) in every layers Let’s look at the picture shown above as an example. a(1) = x = 4 1 . \\theta (1) = 3 4 . z(2) = 31 . a(2) = 3 1; Examples and intuitions \\theta determines the function Pay attention to the g(z) We can conbinge some units togethor to build more complex problems","tags":[{"name":"machine learning","slug":"machine-learning","permalink":"http://tianhao66.cn/tags/machine-learning/"},{"name":"Neurons Networks","slug":"Neurons-Networks","permalink":"http://tianhao66.cn/tags/Neurons-Networks/"},{"name":"机器学习","slug":"机器学习","permalink":"http://tianhao66.cn/tags/机器学习/"},{"name":"神经网络","slug":"神经网络","permalink":"http://tianhao66.cn/tags/神经网络/"}]},{"title":"Learn Flex","date":"2017-04-18T09:38:07.000Z","path":"2017/04/18/Learn-Flex/","text":"关于Flex（弹性）布局[TOC] 零、注意1.使用flex非常方便。但是要注意区分容器（container）的属性和容器中项目（item）的属性。 一、概念flex—“弹性布局”在2009年推出，可以简便、完整、响应式地实现各种页面布局，目前，它已经得到所有浏览器的支持。 将父容器的display设置成flex，子元素自动成为容器成员。 123.box&#123; display: flex;&#125; 设为Flex布局以后，子元素的float、clear和vertical-align属性将失效 容器存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end；交叉轴的开始位置叫做cross start，结束位置叫做cross end。 项目默认沿主轴排列。单个项目占据的主轴空间叫做main size，占据的交叉轴空间叫做cross size。 二、容器的属性 flex-direction flex-wrap flex-flow justify-content align-items align-content 1.flex-direction排布方向 row（默认值）：主轴为水平方向，起点在左端。 row-reverse：主轴为水平方向，起点在右端。 column：主轴为垂直方向，起点在上沿。 column-reverse：主轴为垂直方向，起点在下沿。 示例 1234567891011121314151617181920212223242526272829&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=\"utf-8\"&gt;&lt;style&gt;#main &#123; display: flex; flex-direction:xxxxxx;&#125; #main div &#123; width: 40px; height: 40px;&#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=\"main\"&gt; &lt;div style=\"background-color:coral;\"&gt;A&lt;/div&gt; &lt;div style=\"background-color:lightblue;\"&gt;B&lt;/div&gt; &lt;div style=\"background-color:khaki;\"&gt;C&lt;/div&gt; &lt;div style=\"background-color:pink;\"&gt;D&lt;/div&gt; &lt;div style=\"background-color:lightgrey;\"&gt;E&lt;/div&gt; &lt;div style=\"background-color:lightgreen;\"&gt;F&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; xxxxx设置为以上四个值分别得到 2.flex-wrap wrap nowrap(默认) wrap-reverse 示例 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=\"utf-8\"&gt;&lt;title&gt;&lt;/title&gt;&lt;style&gt;#main &#123; display: flex; flex-direction:row; flex-wrap:xxxxxxxxxxxxxxxxxxxx;&#125; #main div &#123; width: 40px; height: 40px;&#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=\"main\"&gt; &lt;div style=\"background-color:coral;\"&gt;A&lt;/div&gt; &lt;div style=\"background-color:lightblue;\"&gt;B&lt;/div&gt; &lt;div style=\"background-color:khaki;\"&gt;C&lt;/div&gt; &lt;div style=\"background-color:pink;\"&gt;D&lt;/div&gt; &lt;div style=\"background-color:lightgrey;\"&gt;E&lt;/div&gt; &lt;div style=\"background-color:lightgreen;\"&gt;F&lt;/div&gt; &lt;div style=\"background-color:coral;\"&gt;A&lt;/div&gt; &lt;div style=\"background-color:lightblue;\"&gt;B&lt;/div&gt; &lt;div style=\"background-color:khaki;\"&gt;C&lt;/div&gt; &lt;div style=\"background-color:pink;\"&gt;D&lt;/div&gt; &lt;div style=\"background-color:lightgrey;\"&gt;E&lt;/div&gt; &lt;div style=\"background-color:lightgreen;\"&gt;F&lt;/div&gt; &lt;div style=\"background-color:coral;\"&gt;A&lt;/div&gt; &lt;div style=\"background-color:lightblue;\"&gt;B&lt;/div&gt; &lt;div style=\"background-color:khaki;\"&gt;C&lt;/div&gt; &lt;div style=\"background-color:pink;\"&gt;D&lt;/div&gt; &lt;div style=\"background-color:lightgrey;\"&gt;E&lt;/div&gt; &lt;div style=\"background-color:lightgreen;\"&gt;F&lt;/div&gt; &lt;div style=\"background-color:coral;\"&gt;A&lt;/div&gt; &lt;div style=\"background-color:lightblue;\"&gt;B&lt;/div&gt; &lt;div style=\"background-color:khaki;\"&gt;C&lt;/div&gt; &lt;div style=\"background-color:pink;\"&gt;D&lt;/div&gt; &lt;div style=\"background-color:lightgrey;\"&gt;E&lt;/div&gt; &lt;div style=\"background-color:lightgreen;\"&gt;F&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 以上属性一次替代 xxxxxxx 分别得到： 3.flex-flowflex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap 4. justify-content定义项目在一行上的分布方式 flex-start（默认）：左对齐 flex-end：右对齐 center： 居中 space-between：两端顶满，项目之间的间隔都相等。 space-around：每个项目两端间隔（x）相等（两个项目之间间隔为2x，两端为1x） 5.align-items定义了一行的项目在竖直方向上的对齐方式 flex-start：交叉轴的起点对齐。 flex-end：交叉轴的终点对齐。 center：交叉轴的中点对齐。 baseline: 项目的第一行文字的基线对齐。 stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。 6.align-content定义了多行元素中美一行在竖直方向上的分布方式 flex-start：与交叉轴的起点对齐。 flex-end：与交叉轴的终点对齐。 center：与交叉轴的中点对齐。 space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。 space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。 stretch（默认值）：轴线占满整个交叉轴。 三、容器中项目的属性 order flex-grow flex-shrink flex-basis flex align-self 1. order为项目设定序号，项目会按照序号大小在容器中排布 123.item &#123; order: &lt;integer&gt;;&#125; 2.lex-grow为项目设置占满空间的放大比例。项目的数值的比例为他们占据整个空间的各自的比例。 默认为0，即有空间也不放大 3.flex-shrink为项目设置占满空间的缩小比例。项目的数值的比例为他们占据整个空间的各自的比例。 默认为1，为使用空间而按比例缩小。负数无效。值为0是不缩小。 4.flex-basis定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。 1234&gt; .item &#123;&gt; flex-basis: &lt;length&gt; | auto; /* default auto */&gt; &#125;&gt; 它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间。 5.flexflex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。 12345&gt; .item &#123;&gt; flex: none | [ &lt;&apos;flex-grow&apos;&gt; &lt;&apos;flex-shrink&apos;&gt;? || &lt;&apos;flex-basis&apos;&gt; ]&gt; &#125;&gt;&gt; 该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。 建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。 6.align-selfalign-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。 1234&gt; .item &#123;&gt; align-self: auto | flex-start | flex-end | center | baseline | stretch;&gt; &#125;&gt; 该属性可能取6个值，除了auto，其他都与align-items属性完全一致。","tags":[{"name":"css3","slug":"css3","permalink":"http://tianhao66.cn/tags/css3/"},{"name":"前端","slug":"前端","permalink":"http://tianhao66.cn/tags/前端/"}]},{"title":"Hello World","date":"2017-04-16T11:59:14.000Z","path":"2017/04/16/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]